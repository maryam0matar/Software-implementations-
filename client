import tkinter as tk
from tkinter import messagebox
import random
import csv

class EmployeeSystemGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Employee System")
        self.create_start_gui()

    def create_start_gui(self):
        # Create the initial GUI with a button to start the service
        self.start_button = tk.Button(self.master, text="Start Your Service", command=self.show_clients_page)
        self.start_button.pack()

    def show_clients_page(self):
        # Clear the current widgets and show the clients page
        self.clear_current_widgets()
        self.clients_button = tk.Button(self.master, text="Clients", command=self.show_client_management_page)
        self.clients_button.pack()

    def show_client_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Client ID
        self.clear_current_widgets()
        messagebox.showinfo("Client Management", "Do you have an existing Client ID?")
        self.existing_client_response = tk.StringVar()
        self.existing_client_response.set("No")
        self.existing_client_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_client_response, value="Yes")
        self.existing_client_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_client_response, value="No")
        self.existing_client_radio_yes.pack()
        self.existing_client_radio_no.pack()
        self.confirm_existing_client_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_client)
        self.confirm_existing_client_button.pack()

    def confirm_existing_client(self):
        # If the user has an existing Client ID, show the form to enter it. Otherwise, show the form to create a new client.
        if self.existing_client_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_client_form()
        else:
            self.clear_current_widgets()
            self.show_new_client_form()

    def clear_current_widgets(self):
        # Helper function to clear all current widgets on the GUI
        for widget in self.master.winfo_children():
            widget.destroy()

    def show_existing_client_form(self):
        # Display form to enter existing Client ID
        self.client_id_label = tk.Label(self.master, text="Enter Client ID:")
        self.client_id_label.pack()
        self.client_id_entry = tk.Entry(self.master)
        self.client_id_entry.pack()
        self.check_client_button = tk.Button(self.master, text="Check Client", command=self.check_client)
        self.check_client_button.pack()

    def check_client(self):
        # Check if the entered Client ID exists and display the client details if found
        client_id = self.client_id_entry.get()
        client_data = self.retrieve_client_data(client_id)
        if client_data:
            messagebox.showinfo("Client Details", f"Name: {client_data['Name']}\nAddress: {client_data['Address']}\nContact: {client_data['Contact']}\nBudget: {client_data['Budget']}")
        else:
            messagebox.showerror("Error", "Client not found")

    def retrieve_client_data(self, client_id):
        # Retrieve client data from CSV file based on Client ID
        try:
            with open("client_data.csv", newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    if row['Client ID'] == client_id:
                        return row
        except FileNotFoundError:
            return None
        return None

    def show_new_client_form(self):
        # Display form to create a new client
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.address_label = tk.Label(self.master, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(self.master)
        self.address_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact details:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.budget_label = tk.Label(self.master, text="Budget:")
        self.budget_label.pack()
        self.budget_entry = tk.Entry(self.master)
        self.budget_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_client_data)
        self.submit_button.pack()

    def save_client_data(self):
        # Generate a random Client ID and save client data to CSV file
        client_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        address = self.address_entry.get()
        contact = self.contact_entry.get()
        budget = self.budget_entry.get()

        # Save client data to file
        with open("client_data.csv", "a", newline='') as csvfile:
            fieldnames = ['Client ID', 'Name', 'Address', 'Contact', 'Budget']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow({'Client ID': client_id, 'Name': name, 'Address': address, 'Contact': contact, 'Budget': budget})

        # Display success message with generated Client ID
        messagebox.showinfo("Success", f"Client registered successfully. Your Client ID is: {client_id}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.create_start_gui()

def main():
    # Initialize Tkinter and start the application
    root = tk.Tk()
    employee_system_gui = EmployeeSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
