import tkinter as tk
from tkinter import messagebox
import pickle

# Employee class to represent employee details
class Employee:
    def __init__(self, employee_id, name, department, job_title, basic_salary, age, dob, passport_details):
        self.employee_id = employee_id
        self.name = name
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.age = age
        self.dob = dob
        self.passport_details = passport_details

# GUI class to manage the employee system
class EmployeeSystemGUI:
    def __init__(self, master):
        # Initialize the GUI
        self.master = master
        self.master.title("Employee System")
        self.employee_list = []
        self.load_employee_data()  # Load existing employee data from file
        self.create_start_gui()

    # Load existing employee data from file
    def load_employee_data(self):
        try:
            with open("employee_data.pkl", "rb") as file:
                self.employee_list = pickle.load(file)
        except FileNotFoundError:
            pass  # If file doesn't exist, create an empty list

    # Save employee data to file
    def save_employee_data(self):
        with open("employee_data.pkl", "wb") as file:
            pickle.dump(self.employee_list, file)

    # Create the initial start GUI with a button
    def create_start_gui(self):
        self.start_button = tk.Button(self.master, text="Start Your Service", command=self.show_employees_page)
        self.start_button.pack()

    # Show page to check if the user is registered
    def show_employees_page(self):
        self.start_button.destroy()
        messagebox.showinfo("Registered", "Are you a registered employee?")
        self.registered_response = tk.StringVar()
        self.registered_response.set("Yes")
        self.registered_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.registered_response, value="Yes")
        self.registered_radio_no = tk.Radiobutton(self.master, text="No", variable=self.registered_response, value="No")
        self.registered_radio_yes.pack()
        self.registered_radio_no.pack()
        self.confirm_registered_button = tk.Button(self.master, text="Confirm", command=self.confirm_registered)
        self.confirm_registered_button.pack()

    # Handle confirmation of user registration status
    def confirm_registered(self):
        if self.registered_response.get() == "Yes":
            self.registered_radio_yes.destroy()
            self.registered_radio_no.destroy()
            self.confirm_registered_button.destroy()
            self.show_employee_info_page()  # Show employee info page if registered
        else:
            self.registered_radio_yes.destroy()
            self.registered_radio_no.destroy()
            self.confirm_registered_button.destroy()
            self.create_registration_form()  # Show registration form if not registered

    # Show page to input employee ID for retrieving information
    def show_employee_info_page(self):
        self.employee_id_label = tk.Label(self.master, text="Enter Employee ID (5 digits):")
        self.employee_id_label.pack()
        self.employee_id_entry = tk.Entry(self.master)
        self.employee_id_entry.pack()

        self.check_employee_button = tk.Button(self.master, text="Check Employee", command=self.check_employee)
        self.check_employee_button.pack()

    # Retrieve employee information based on employee ID
    def check_employee(self):
        employee_id = self.employee_id_entry.get()
        employee = self.find_employee(employee_id)
        if employee:
            self.display_employee_info(employee)
        else:
            messagebox.showinfo("Error", "Employee not found.")

    # Find employee based on employee ID
    def find_employee(self, employee_id):
        for employee in self.employee_list:
            if employee.employee_id == employee_id:
                return employee
        return None

    # Display employee information
    def display_employee_info(self, employee):
        messagebox.showinfo("Employee Information",
                            f"Name: {employee.name}\n"
                            f"Employee ID: {employee.employee_id}\n"
                            f"Department: {employee.department}\n"
                            f"Job Title: {employee.job_title}\n"
                            f"Basic Salary: {employee.basic_salary}\n"
                            f"Age: {employee.age}\n"
                            f"Date of Birth: {employee.dob}\n"
                            f"Passport Details: {employee.passport_details}")

    # Create the registration form for new employees
    def create_registration_form(self):
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.employee_id_label = tk.Label(self.master, text="Employee ID (5 digits):")
        self.employee_id_label.pack()
        self.employee_id_entry = tk.Entry(self.master)
        self.employee_id_entry.pack()

        self.department_label = tk.Label(self.master, text="Department:")
        self.department_label.pack()
        self.department_var = tk.StringVar(self.master)
        self.department_var.set("Sales Managers")  # Default value
        self.department_dropdown = tk.OptionMenu(self.master, self.department_var, "Sales Managers", "Salespersons", "Marketing Managers", "Marketers", "Accountants", "Designers", "Handymen")
        self.department_dropdown.pack()

        self.job_title_label = tk.Label(self.master, text="Job Title:")
        self.job_title_label.pack()
        self.job_title_entry = tk.Entry(self.master)
        self.job_title_entry.pack()

        self.basic_salary_label = tk.Label(self.master, text="Basic Salary:")
        self.basic_salary_label.pack()
        self.basic_salary_entry = tk.Entry(self.master)
        self.basic_salary_entry.pack()

        self.age_label = tk.Label(self.master, text="Age:")
        self.age_label.pack()
        self.age_entry = tk.Entry(self.master)
        self.age_entry.pack()

        self.dob_label = tk.Label(self.master, text="Date of Birth (YYYY-MM-DD):")
        self.dob_label.pack()
        self.dob_entry = tk.Entry(self.master)
        self.dob_entry.pack()

        self.passport_label = tk.Label(self.master, text="Passport Details:")
        self.passport_label.pack()
        self.passport_entry = tk.Entry(self.master)
        self.passport_entry.pack()

        self.register_button = tk.Button(self.master, text="Register", command=self.register_employee)
        self.register_button.pack()

    # Register new employee
    def register_employee(self):
        name = self.name_entry.get()
        employee_id = self.employee_id_entry.get()
        department = self.department_var.get()
        job_title = self.job_title_entry.get()
        basic_salary = self.basic_salary_entry.get()
        age = self.age_entry.get()
        dob = self.dob_entry.get()
        passport_details = self.passport_entry.get()
        
        # Create a new Employee object and add it to the employee_list
        new_employee = Employee(employee_id, name, department, job_title, basic_salary, age, dob, passport_details)
        self.employee_list.append(new_employee)
        
        # Save the updated employee data to file
        self.save_employee_data()
        
        # Display the employee information
        self.display_employee_info(new_employee)
        messagebox.showinfo("Success", "Employee registered successfully.")

        # Destroy the current page and recreate the start page
        self.destroy_registration_form()
        self.create_start_gui()

    # Destroy the registration form page
    def destroy_registration_form(self):
        # Destroy all widgets in the master window
        for widget in self.master.winfo_children():
            widget.destroy()

# Main function to run the application
def main():
    root = tk.Tk()
    employee_system_gui = EmployeeSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()

