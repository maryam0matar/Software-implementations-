import tkinter as tk
from tkinter import messagebox
import random
import csv

class EmployeeSystemGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Employee System")
        self.create_start_gui()

    def create_start_gui(self):
        # Create the initial GUI with a button to start the service
        self.start_button = tk.Button(self.master, text="Start Your Service", command=self.show_service_selection)
        self.start_button.pack()

    def show_service_selection(self):
        # Clear the current widgets and show the service selection page
        self.clear_current_widgets()
        self.venue_button = tk.Button(self.master, text="Venues", command=self.show_venue_management_page)
        self.venue_button.pack()
        self.guests_button = tk.Button(self.master, text="Guests", command=self.show_guest_management_page)
        self.guests_button.pack()
        self.supplier_button = tk.Button(self.master, text="Suppliers (Caterers)", command=self.show_supplier_management_page)
        self.supplier_button.pack()
        self.employee_button = tk.Button(self.master, text="Employees", command=self.show_employee_management_page)
        self.employee_button.pack()

    def show_venue_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Venue ID
        self.clear_current_widgets()
        messagebox.showinfo("Venue Management", "Do you have an existing Venue ID?")
        self.existing_venue_response = tk.StringVar()
        self.existing_venue_response.set("No")
        self.existing_venue_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_venue_response, value="Yes")
        self.existing_venue_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_venue_response, value="No")
        self.existing_venue_radio_yes.pack()
        self.existing_venue_radio_no.pack()
        self.confirm_existing_venue_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_venue)
        self.confirm_existing_venue_button.pack()

    def confirm_existing_venue(self):
        # If the user has an existing Venue ID, show the form to enter it. Otherwise, show the form to register a new venue.
        if self.existing_venue_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_venue_form()
        else:
            self.clear_current_widgets()
            self.show_new_venue_form()

    def show_existing_venue_form(self):
        # Display form to enter existing Venue ID
        self.venue_id_label = tk.Label(self.master, text="Enter Venue ID:")
        self.venue_id_label.pack()
        self.venue_id_entry = tk.Entry(self.master)
        self.venue_id_entry.pack()
        self.check_venue_button = tk.Button(self.master, text="Check Venue", command=self.check_venue)
        self.check_venue_button.pack()

    def check_venue(self):
        # Check if the entered Venue ID exists and display the venue details if found
        venue_id = self.venue_id_entry.get()
        venue_data = self.retrieve_venue_data(venue_id)
        if venue_data:
            messagebox.showinfo("Venue Details", f"Name: {venue_data['Name']}\nAddress: {venue_data['Address']}\nContact: {venue_data['Contact']}\nMinimum Guests: {venue_data['Minimum Guests']}\nMaximum Guests: {venue_data['Maximum Guests']}")
        else:
            messagebox.showerror("Error", "Venue not found")

    def retrieve_venue_data(self, venue_id):
        # Retrieve venue data from CSV file based on Venue ID
        try:
            with open("venue_data.csv", newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    if row['Venue ID'] == venue_id:
                        return row
        except FileNotFoundError:
            return None
        return None

    def show_new_venue_form(self):
        # Display form to register a new venue
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.address_label = tk.Label(self.master, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(self.master)
        self.address_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.min_guests_label = tk.Label(self.master, text="Minimum Guests:")
        self.min_guests_label.pack()
        self.min_guests_entry = tk.Entry(self.master)
        self.min_guests_entry.pack()

        self.max_guests_label = tk.Label(self.master, text="Maximum Guests:")
        self.max_guests_label.pack()
        self.max_guests_entry = tk.Entry(self.master)
        self.max_guests_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_venue_data)
        self.submit_button.pack()

    def save_venue_data(self):
        # Generate a random Venue ID and save venue data to CSV file
        venue_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        address = self.address_entry.get()
        contact = self.contact_entry.get()
        min_guests = self.min_guests_entry.get()
        max_guests = self.max_guests_entry.get()

        # Save venue data to file
        with open("venue_data.csv", "a", newline='') as csvfile:
            fieldnames = ['Venue ID', 'Name', 'Address', 'Contact', 'Minimum Guests', 'Maximum Guests']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow({'Venue ID': venue_id, 'Name': name, 'Address': address, 'Contact': contact, 'Minimum Guests': min_guests, 'Maximum Guests': max_guests})

        # Display success message with generated Venue ID
        messagebox.showinfo("Success", f"Venue registered successfully. Your Venue ID is: {venue_id}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.show_service_selection()

    def show_guest_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Guest ID
        self.clear_current_widgets()
        messagebox.showinfo("Guest Management", "Do you have an existing Guest ID?")
        self.existing_guest_response = tk.StringVar()
        self.existing_guest_response.set("No")
        self.existing_guest_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_guest_response, value="Yes")
        self.existing_guest_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_guest_response, value="No")
        self.existing_guest_radio_yes.pack()
        self.existing_guest_radio_no.pack()
        self.confirm_existing_guest_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_guest)
        self.confirm_existing_guest_button.pack()

    def confirm_existing_guest(self):
        # If the user has an existing Guest ID, show the form to enter it. Otherwise, show the form to create a new guest.
        if self.existing_guest_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_guest_form()
        else:
            self.clear_current_widgets()
            self.show_new_guest_form()

    def show_existing_guest_form(self):
        # Display form to enter existing Guest ID
        self.guest_id_label = tk.Label(self.master, text="Enter Guest ID:")
        self.guest_id_label.pack()
        self.guest_id_entry = tk.Entry(self.master)
        self.guest_id_entry.pack()
        self.check_guest_button = tk.Button(self.master, text="Check Guest", command=self.check_guest)
        self.check_guest_button.pack()

    def check_guest(self):
        # Check if the entered Guest ID exists and display the guest details if found
        guest_id = self.guest_id_entry.get()
        guest_data = self.retrieve_guest_data(guest_id)
        if guest_data:
            messagebox.showinfo("Guest Details", f"Name: {guest_data['Name']}\nAddress: {guest_data['Address']}\nContact: {guest_data['Contact']}")
        else:
            messagebox.showerror("Error", "Guest not found")

    def retrieve_guest_data(self, guest_id):
        # Retrieve guest data from CSV file based on Guest ID
        try:
            with open("guest_data.csv", newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    if row['Guest ID'] == guest_id:
                        return row
        except FileNotFoundError:
            return None
        return None

    def show_new_guest_form(self):
        # Display form to create a new guest
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.address_label = tk.Label(self.master, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(self.master)
        self.address_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact details:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_guest_data)
        self.submit_button.pack()

    def save_guest_data(self):
        # Generate a random Guest ID and save guest data to CSV file
        guest_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        address = self.address_entry.get()
        contact = self.contact_entry.get()

        # Save guest data to file
        with open("guest_data.csv", "a", newline='') as csvfile:
            fieldnames = ['Guest ID', 'Name', 'Address', 'Contact']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow({'Guest ID': guest_id, 'Name': name, 'Address': address, 'Contact': contact})

        # Display success message with generated Guest ID
        messagebox.showinfo("Success", f"Guest registered successfully. Your Guest ID is: {guest_id}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.show_service_selection()

    def show_supplier_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Caterer ID
        self.clear_current_widgets()
        messagebox.showinfo("Caterer Management", "Do you have an existing Caterer ID?")
        self.existing_caterer_response = tk.StringVar()
        self.existing_caterer_response.set("No")
        self.existing_caterer_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_caterer_response, value="Yes")
        self.existing_caterer_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_caterer_response, value="No")
        self.existing_caterer_radio_yes.pack()
        self.existing_caterer_radio_no.pack()
        self.confirm_existing_caterer_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_caterer)
        self.confirm_existing_caterer_button.pack()

    def confirm_existing_caterer(self):
        # If the user has an existing Caterer ID, show the form to enter it. Otherwise, show the form to register a new caterer.
        if self.existing_caterer_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_caterer_form()
        else:
            self.clear_current_widgets()
            self.show_new_caterer_form()

    def show_existing_caterer_form(self):
        # Display form to enter existing Caterer ID
        self.caterer_id_label = tk.Label(self.master, text="Enter Caterer ID:")
        self.caterer_id_label.pack()
        self.caterer_id_entry = tk.Entry(self.master)
        self.caterer_id_entry.pack()
        self.check_caterer_button = tk.Button(self.master, text="Check Caterer", command=self.check_caterer)
        self.check_caterer_button.pack()

    def check_caterer(self):
        # Check if the entered Caterer ID exists and display the caterer details if found
        caterer_id = self.caterer_id_entry.get()
        caterer_data = self.retrieve_caterer_data(caterer_id)
        if caterer_data:
            messagebox.showinfo("Caterer Details", f"Caterer ID: {caterer_data['Caterer ID']}\nName: {caterer_data['Name']}\nAddress: {caterer_data['Address']}\nContact: {caterer_data['Contact']}\nMenu: {caterer_data['Menu']}\nMinimum Guests: {caterer_data['Minimum Guests']}\nMaximum Guests: {caterer_data['Maximum Guests']}")
        else:
            messagebox.showerror("Error", "Caterer not found")

    def retrieve_caterer_data(self, caterer_id):
        # Retrieve caterer data from CSV file based on Caterer ID
        try:
            with open("caterer_data.csv", newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    if row['Caterer ID'] == caterer_id:
                        return row
        except FileNotFoundError:
            return None
        return None

    def show_new_caterer_form(self):
        # Display form to register a new caterer
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.address_label = tk.Label(self.master, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(self.master)
        self.address_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.menu_label = tk.Label(self.master, text="Menu:")
        self.menu_label.pack()
        self.menu_entry = tk.Entry(self.master)
        self.menu_entry.pack()

        self.min_guests_label = tk.Label(self.master, text="Minimum Guests:")
        self.min_guests_label.pack()
        self.min_guests_entry = tk.Entry(self.master)
        self.min_guests_entry.pack()

        self.max_guests_label = tk.Label(self.master, text="Maximum Guests:")
        self.max_guests_label.pack()
        self.max_guests_entry = tk.Entry(self.master)
        self.max_guests_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_caterer_data)
        self.submit_button.pack()

    def save_caterer_data(self):
        # Generate a random Caterer ID and save caterer data to CSV file
        caterer_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        address = self.address_entry.get()
        contact = self.contact_entry.get()
        menu = self.menu_entry.get()
        min_guests = self.min_guests_entry.get()
        max_guests = self.max_guests_entry.get()

        # Save caterer data to file
        with open("caterer_data.csv", "a", newline='') as csvfile:
            fieldnames = ['Caterer ID', 'Name', 'Address', 'Contact', 'Menu', 'Minimum Guests', 'Maximum Guests']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow({'Caterer ID': caterer_id, 'Name': name, 'Address': address, 'Contact': contact, 'Menu': menu, 'Minimum Guests': min_guests, 'Maximum Guests': max_guests})

        # Display success message with generated Caterer ID and details
        messagebox.showinfo("Success", f"Caterer registered successfully. Your Caterer ID is: {caterer_id}\n\nCaterer Details:\nName: {name}\nAddress: {address}\nContact: {contact}\nMenu: {menu}\nMinimum Guests: {min_guests}\nMaximum Guests: {max_guests}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.show_service_selection()

    def show_employee_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Employee ID
        self.clear_current_widgets()
        messagebox.showinfo("Employee Management", "Do you have an existing Employee ID?")
        self.existing_employee_response = tk.StringVar()
        self.existing_employee_response.set("No")
        self.existing_employee_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_employee_response, value="Yes")
        self.existing_employee_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_employee_response, value="No")
        self.existing_employee_radio_yes.pack()
        self.existing_employee_radio_no.pack()
        self.confirm_existing_employee_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_employee)
        self.confirm_existing_employee_button.pack()

    def confirm_existing_employee(self):
        # If the user has an existing Employee ID, show the form to enter it. Otherwise, show the form to register a new employee.
        if self.existing_employee_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_employee_form()
        else:
            self.clear_current_widgets()
            self.show_new_employee_form()

    def show_existing_employee_form(self):
        # Display form to enter existing Employee ID
        self.employee_id_label = tk.Label(self.master, text="Enter Employee ID:")
        self.employee_id_label.pack()
        self.employee_id_entry = tk.Entry(self.master)
        self.employee_id_entry.pack()
        self.check_employee_button = tk.Button(self.master, text="Check Employee", command=self.check_employee)
        self.check_employee_button.pack()

    def check_employee(self):
        # Check if the entered Employee ID exists and display the employee details if found
        employee_id = self.employee_id_entry.get()
        employee_data = self.retrieve_employee_data(employee_id)
        if employee_data:
            messagebox.showinfo("Employee Details", f"Name: {employee_data['Name']}\nPosition: {employee_data['Position']}\nContact: {employee_data['Contact']}")
        else:
            messagebox.showerror("Error", "Employee not found")

    def retrieve_employee_data(self, employee_id):
        # Retrieve employee data from CSV file based on Employee ID
        try:
            with open("employee_data.csv", newline='') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    if row['Employee ID'] == employee_id:
                        return row
        except FileNotFoundError:
            return None
        return None

    def show_new_employee_form(self):
        # Display form to register a new employee
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.position_label = tk.Label(self.master, text="Position:")
        self.position_label.pack()
        self.position_entry = tk.Entry(self.master)
        self.position_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_employee_data)
        self.submit_button.pack()

    def save_employee_data(self):
        # Generate a random Employee ID and save employee data to CSV file
        employee_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        position = self.position_entry.get()
        contact = self.contact_entry.get()

        # Save employee data to file
        with open("employee_data.csv", "a", newline='') as csvfile:
            fieldnames = ['Employee ID', 'Name', 'Position', 'Contact']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writerow({'Employee ID': employee_id, 'Name': name, 'Position': position, 'Contact': contact})

        # Display success message with generated Employee ID
        messagebox.showinfo("Success", f"Employee registered successfully. Your Employee ID is: {employee_id}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.show_service_selection()

    def clear_current_widgets(self):
        # Helper function to clear all current widgets on the GUI
        for widget in self.master.winfo_children():
            widget.destroy()

def main():
    # Initialize Tkinter and start the application
    root = tk.Tk()
    employee_system_gui = EmployeeSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
