import tkinter as tk
from tkinter import messagebox
import random
import pickle

class EmployeeSystemGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Employee System")
        self.create_start_gui()

    def create_start_gui(self):
        # Create the initial GUI with a button to start the service
        self.start_button = tk.Button(self.master, text="Start Your Service", command=self.show_venue_page)
        self.start_button.pack()

    def show_venue_page(self):
        # Clear the current widgets and show the venue page
        self.clear_current_widgets()
        self.venue_button = tk.Button(self.master, text="Venue", command=self.show_venue_management_page)
        self.venue_button.pack()

    def show_venue_management_page(self):
        # Clear the current widgets and prompt the user to choose if they have an existing Venue ID
        self.clear_current_widgets()
        messagebox.showinfo("Venue Management", "Do you have an existing Venue ID?")
        self.existing_venue_response = tk.StringVar()
        self.existing_venue_response.set("No")
        self.existing_venue_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_venue_response, value="Yes")
        self.existing_venue_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_venue_response, value="No")
        self.existing_venue_radio_yes.pack()
        self.existing_venue_radio_no.pack()
        self.confirm_existing_venue_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_venue)
        self.confirm_existing_venue_button.pack()

    def confirm_existing_venue(self):
        # If the user has an existing Venue ID, show the form to enter it. Otherwise, show the form to register a new venue.
        if self.existing_venue_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_venue_form()
        else:
            self.clear_current_widgets()
            self.show_new_venue_form()

    def clear_current_widgets(self):
        # Helper function to clear all current widgets on the GUI
        for widget in self.master.winfo_children():
            widget.destroy()

    def show_existing_venue_form(self):
        # Display form to enter existing Venue ID
        self.venue_id_label = tk.Label(self.master, text="Enter Venue ID:")
        self.venue_id_label.pack()
        self.venue_id_entry = tk.Entry(self.master)
        self.venue_id_entry.pack()
        self.check_venue_button = tk.Button(self.master, text="Check Venue", command=self.check_venue)
        self.check_venue_button.pack()

    def check_venue(self):
        # Check if the entered Venue ID exists and display the venue details if found
        venue_id = self.venue_id_entry.get()
        venue_data = self.retrieve_venue_data(venue_id)
        if venue_data:
            messagebox.showinfo("Venue Details", f"Name: {venue_data['Name']}\nAddress: {venue_data['Address']}\nContact: {venue_data['Contact']}\nMinimum Guests: {venue_data['Minimum Guests']}\nMaximum Guests: {venue_data['Maximum Guests']}")
        else:
            messagebox.showerror("Error", "Venue not found")

    def retrieve_venue_data(self, venue_id):
        # Retrieve venue data from binary file based on Venue ID
        try:
            with open("venue_data.pkl", "rb") as file:
                venue_data = pickle.load(file)
                if venue_id in venue_data:
                    return venue_data[venue_id]
        except FileNotFoundError:
            return None
        return None

    def show_new_venue_form(self):
        # Display form to register a new venue
        self.name_label = tk.Label(self.master, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.master)
        self.name_entry.pack()

        self.address_label = tk.Label(self.master, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(self.master)
        self.address_entry.pack()

        self.contact_label = tk.Label(self.master, text="Contact:")
        self.contact_label.pack()
        self.contact_entry = tk.Entry(self.master)
        self.contact_entry.pack()

        self.min_guests_label = tk.Label(self.master, text="Minimum Guests:")
        self.min_guests_label.pack()
        self.min_guests_entry = tk.Entry(self.master)
        self.min_guests_entry.pack()

        self.max_guests_label = tk.Label(self.master, text="Maximum Guests:")
        self.max_guests_label.pack()
        self.max_guests_entry = tk.Entry(self.master)
        self.max_guests_entry.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_venue_data)
        self.submit_button.pack()

    def save_venue_data(self):
        # Generate a random Venue ID and save venue data to binary file
        venue_id = ''.join(random.choices('0123456789', k=5))
        name = self.name_entry.get()
        address = self.address_entry.get()
        contact = self.contact_entry.get()
        min_guests = self.min_guests_entry.get()
        max_guests = self.max_guests_entry.get()

        # Load existing data or create new dictionary
        try:
            with open("venue_data.pkl", "rb") as file:
                venue_data = pickle.load(file)
        except FileNotFoundError:
            venue_data = {}

        # Add new venue data
        venue_data[venue_id] = {
            'Name': name,
            'Address': address,
            'Contact': contact,
            'Minimum Guests': min_guests,
            'Maximum Guests': max_guests
        }

        # Save venue data to file
        with open("venue_data.pkl", "wb") as file:
            pickle.dump(venue_data, file)

        # Display success message with generated Venue ID
        messagebox.showinfo("Success", f"Venue registered successfully. Your Venue ID is: {venue_id}")

        # Clear current widgets and go back to the start page
        self.clear_current_widgets()
        self.create_start_gui()

def main():
    # Initialize Tkinter and start the application
    root = tk.Tk()
    employee_system_gui = EmployeeSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()

