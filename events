import tkinter as tk
from tkinter import messagebox
import random
import pickle

class Event:
    def __init__(self, event_id, event_type, time_duration, venue, client_id, guest_list, outsource, total_price):
        self.event_id = event_id
        self.event_type = event_type
        self.time_duration = time_duration
        self.venue = venue
        self.client_id = client_id
        self.guest_list = guest_list
        self.outsource = outsource
        self.total_price = total_price

class EmployeeSystemGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Employee System")
        self.create_start_gui()

    def create_start_gui(self):
        self.start_button = tk.Button(self.master, text="Start Your Service", command=self.show_events_page)
        self.start_button.pack()

    def show_events_page(self):
        self.clear_current_widgets()
        self.events_button = tk.Button(self.master, text="Events", command=self.show_event_management_page)
        self.events_button.pack()

    def show_event_management_page(self):
        self.clear_current_widgets()
        messagebox.showinfo("Event Management", "Do you have an existing Event ID?")
        self.existing_event_response = tk.StringVar()
        self.existing_event_response.set("No")
        self.existing_event_radio_yes = tk.Radiobutton(self.master, text="Yes", variable=self.existing_event_response, value="Yes")
        self.existing_event_radio_no = tk.Radiobutton(self.master, text="No", variable=self.existing_event_response, value="No")
        self.existing_event_radio_yes.pack()
        self.existing_event_radio_no.pack()
        self.confirm_existing_event_button = tk.Button(self.master, text="Confirm", command=self.confirm_existing_event)
        self.confirm_existing_event_button.pack()

    def confirm_existing_event(self):
        if self.existing_event_response.get() == "Yes":
            self.clear_current_widgets()
            self.show_existing_event_form()
        else:
            self.clear_current_widgets()
            self.show_new_event_form()

    def clear_current_widgets(self):
        for widget in self.master.winfo_children():
            widget.destroy()

    def show_existing_event_form(self):
        self.event_id_label = tk.Label(self.master, text="Enter Event ID:")
        self.event_id_label.pack()
        self.event_id_entry = tk.Entry(self.master)
        self.event_id_entry.pack()
        self.check_event_button = tk.Button(self.master, text="Check Event", command=self.check_event)
        self.check_event_button.pack()

    def check_event(self):
        event_id = self.event_id_entry.get()
        event = self.retrieve_event_data(event_id)
        if event:
            self.display_invoice(event)
        else:
            messagebox.showerror("Error", "Event not found")

    def retrieve_event_data(self, event_id):
        try:
            with open("event_data.pkl", "rb") as file:
                event_list = pickle.load(file)
                for event in event_list:
                    if event.event_id == event_id:
                        return event
        except FileNotFoundError:
            return None
        return None

    def show_new_event_form(self):
        self.event_type_label = tk.Label(self.master, text="Event Type:")
        self.event_type_label.pack()
        self.event_type_var = tk.StringVar(self.master)
        self.event_type_var.set("Weddings")  
        self.event_type_dropdown = tk.OptionMenu(self.master, self.event_type_var, "Weddings", "Birthdays", "Themed Parties", "Graduations")
        self.event_type_dropdown.pack()

        self.time_duration_label = tk.Label(self.master, text="Time Duration (hours):")
        self.time_duration_label.pack()
        self.time_duration_var = tk.StringVar(self.master)
        self.time_duration_var.set("1") 
        self.time_duration_dropdown = tk.OptionMenu(self.master, self.time_duration_var, "1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
        self.time_duration_dropdown.pack()

        self.venue_label = tk.Label(self.master, text="Venue Address:")
        self.venue_label.pack()
        self.venue_var = tk.StringVar(self.master)
        self.venue_var.set("Venue 1")  
        self.venue_dropdown = tk.OptionMenu(self.master, self.venue_var, "Venue 1", "Venue 2", "Venue 3", "Venue 4", "Venue 5")
        self.venue_dropdown.pack()

        self.client_id_label = tk.Label(self.master, text="Client ID:")
        self.client_id_label.pack()
        self.client_id_var = tk.StringVar(self.master)
        self.client_id_var.set("Client 1")  
        self.client_id_dropdown = tk.OptionMenu(self.master, self.client_id_var, "Client 1", "Client 2", "Client 3", "Client 4", "Client 5")
        self.client_id_dropdown.pack()

        self.guest_list_label = tk.Label(self.master, text="Guest List:")
        self.guest_list_label.pack()
        self.guest_list_entry = tk.Entry(self.master)
        self.guest_list_entry.pack()

        self.outsource_label = tk.Label(self.master, text="Extra Outsource:")
        self.outsource_label.pack()
        self.outsource_var = tk.StringVar(self.master)
        self.outsource_var.set("Catering Company")  
        self.outsource_dropdown = tk.OptionMenu(self.master, self.outsource_var, "Catering Company", "Cleaning Company", "Decorations Company", "Entertainment Company", "Furniture Supply Company")
        self.outsource_dropdown.pack()

        self.submit_button = tk.Button(self.master, text="Submit", command=self.save_event_data)
        self.submit_button.pack()

    def save_event_data(self):
        event_id = ''.join(random.choices('0123456789', k=5))
        event_type = self.event_type_var.get()
        time_duration = int(self.time_duration_var.get())
        venue = self.venue_var.get()
        client_id = self.client_id_var.get()
        guest_list = self.guest_list_entry.get().split(", ") if self.guest_list_entry.get() else []
        outsource = self.outsource_var.get()

        event_price_per_hour = 100  
        total_price = event_price_per_hour * time_duration

        new_event = Event(event_id, event_type, time_duration, venue, client_id, guest_list, outsource, total_price)

        try:
            with open("event_data.pkl", "rb") as file:
                event_list = pickle.load(file)
        except FileNotFoundError:
            event_list = []

        event_list.append(new_event)

        with open("event_data.pkl", "wb") as file:
            pickle.dump(event_list, file)

        self.display_invoice(new_event)
        self.clear_current_widgets()
        self.create_start_gui()

    def display_invoice(self, event):
        invoice_text = f"Event ID: {event.event_id}\n"
        invoice_text += f"Event Type: {event.event_type}\n"
        invoice_text += f"Time Duration: {event.time_duration} hours\n"
        invoice_text += f"Venue: {event.venue}\n"
        invoice_text += f"Client ID: {event.client_id}\n"
        invoice_text += f"Guest List: {', '.join(event.guest_list)}\n"
        invoice_text += f"Outsource: {event.outsource}\n"
        invoice_text += f"Total Price: ${event.total_price}\n"

        messagebox.showinfo("Invoice", invoice_text)

        self.clear_current_widgets()
        self.create_start_gui()

def main():
    root = tk.Tk()
    employee_system_gui = EmployeeSystemGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
